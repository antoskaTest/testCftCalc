/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package testcftcalc;

import java.util.ArrayDeque;
import java.util.List;
import java.util.ArrayList;
import java.util.Deque;
import java.util.LinkedList;
import java.util.NoSuchElementException;
import java.util.Queue;
import javax.swing.JOptionPane;
import javax.swing.text.PlainDocument;

/**
 *
 * @author tosha
 */
public class CalcFrame extends javax.swing.JFrame {

    /**
     * Creates new form CalcFrame
     */
    public CalcFrame() {
        initComponents();
        PlainDocument doc = (PlainDocument) textFieldExp.getDocument();
        doc.setDocumentFilter(new DigitFilter());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        textFieldExp = new javax.swing.JTextField();
        textFieldResult = new javax.swing.JTextField();
        butResult = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        butClear = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        textFieldExp.setText("31+4*2/(1-5)^2");

        textFieldResult.setEditable(false);

        butResult.setText("=");
        butResult.setName(""); // NOI18N
        butResult.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butResultActionPerformed(evt);
            }
        });

        jLabel1.setText("Введите выражение");

        butClear.setText("Очистить");
        butClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                butClearActionPerformed(evt);
            }
        });

        jLabel2.setText("Ответ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel2)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                        .addComponent(jLabel1)
                        .addComponent(textFieldExp, javax.swing.GroupLayout.DEFAULT_SIZE, 237, Short.MAX_VALUE)
                        .addComponent(butResult, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(textFieldResult)
                        .addComponent(butClear, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(22, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(6, 6, 6)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFieldExp, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(butClear)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(butResult)
                .addGap(15, 15, 15)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textFieldResult, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void butResultActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butResultActionPerformed
        // TODO add your handling code here:
        textFieldResult.setText(String.valueOf(calculate(getReversePolishNotation())));
                
    }//GEN-LAST:event_butResultActionPerformed

    private void butClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_butClearActionPerformed
        // TODO add your handling code here:
        textFieldExp.setText("0");
        textFieldResult.setText("");
    }//GEN-LAST:event_butClearActionPerformed

    private List getReversePolishNotation(){
        List<String> rpnString = new LinkedList<String>();
        Deque<String> stack = new ArrayDeque<>();
        String[] exp = textFieldExp.getText().split("(?<![\\d\\.])|(?![\\d\\.])");
        int count = 0;
        for(String str : exp){
            if(str.equals("-")){
                if(count - 1 < 0 || isOperator(exp[count - 1]) || exp[count - 1].equals("(")){
                   rpnString.add("0");
                }
            }
            if(isNumber(str)){  
                rpnString.add(str);
            }
            if(isOperator(str)){
                while(!stack.isEmpty() && priorityOperator(stack.peek()) >= priorityOperator(str)){
                    rpnString.add(stack.pop());
                }
                stack.push(str);
            }
            if(str.equals("(")){
                stack.push(str);
            }
            if(str.equals(")")){
                try{
                    while(!stack.peek().equals("(")){
                        rpnString.add(stack.pop());
                    }
                    stack.pop();
                }catch(NoSuchElementException | NullPointerException ex){
                    rpnString.clear();
                    stack.clear();
                    JOptionPane.showMessageDialog(this, "Неверное количество скобок");
                    return rpnString;
                }
            }
            count++;
        }
        while(!stack.isEmpty()){
            if(stack.peek().equals("(")){
                rpnString.clear();
                stack.clear();
                JOptionPane.showMessageDialog(this, "Неверное количество скобок");
                return rpnString;
            }
            rpnString.add(stack.pop());
        }
        return rpnString;
    }
    private double calculate(List<String> listRPN){
        if(listRPN.isEmpty()){
            return 0;
        }
        Deque<String> stack = new ArrayDeque<>();
        for(String str:listRPN){
            if(isNumber(str)){
                stack.push(str);
            }
            if(isOperator(str)){
                double result = 0;
                double first = Double.parseDouble(stack.pop());
                double second = Double.parseDouble(stack.pop());
                switch(str){
                    case "+":
                        result = second + first;
                        break;
                    case "-":
                        result = second - first;
                        break;
                    case "*":
                        result = second * first;
                        break;
                    case "/":
                        result = second / first;
                        break;
                    case "^":
                        result = Math.pow(second, first);
                        break;
                }
                stack.push(String.valueOf(result));
            }
        }
        return Double.parseDouble(stack.pop());
    }
    private int priorityOperator(String operator){
        switch(operator){
            case "+":
            case "-":
                return 1;
            case "*":
            case "/":
                return 2;
            case "^":
                return 3;
            default:
                return 0;
        }
    }
    private boolean isNumber(String str){
        try{
            Double.parseDouble(str);
        }catch(NumberFormatException ex){
            return false;
        }
        return true;
    }
    private boolean isOperator(String str){
        return str.equals("+")||str.equals("-")||str.equals("*")||str.equals("/")||str.equals("^");
    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CalcFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CalcFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CalcFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CalcFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CalcFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton butClear;
    private javax.swing.JButton butResult;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JTextField textFieldExp;
    private javax.swing.JTextField textFieldResult;
    // End of variables declaration//GEN-END:variables
}
